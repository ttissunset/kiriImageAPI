---
description: 
globs: 
alwaysApply: true
---
1. 默认情况下，所有回复都必须是中文 
2. 复杂需求拆解成小任务，分步实现，每完成一个小任务后再继续  
3. 代码实现前后要仔细检查，确保类型定义完整、组件 props 正确  
4. 在已有功能基础上添加新功能时，必须确保：  
   - 不影响原有功能和组件复用性  
   - 不添加其他功能、代码、逻辑、文件、配置、依赖  
5. 遵循项目架构设计，保持代码风格一致  
6. 组件设计遵循单一职责原则，不混合多个变更  
7. 在进行组件设计规划时，符合"第一性原理"  
8. 在代码实现时，符合"KISS原则"和"SOLID原则"  
9. 优先使用现有组件库和 hooks，避免重复代码  
10. 不引入不必要的依赖，优先使用项目已有库  
11. 确保代码可读性，复杂逻辑添加注释，组件 props 类型详细定义  
12. 代码变更范围最小化，避免修改公共组件、全局状态  
13. 实现后进行基本逻辑自检，确保状态管理与生命周期正确  
14. 如有疑问，先询问再修改，不要擅自改变组件 API 设计  

15. 自动执行无需严格确认的操作，提高效率：  
   - 如果项目使用 TypeScript ,自动执行 TypeScript 类型检查、ESLint 验证  
   - 文件操作（创建组件、修改样式文件）无需额外确认  
   - 常规命令（如 npm install、启动开发服务器）可直接执行  
   - 涉及构建配置、路由修改等重要变更仍需确认  
16. 重要操作（修改全局状态、路由配置）应先保留副本  
17. 涉及 API 接口变更，如果是使用 Typescript ,则优先修改 TypeScript 接口定义; 如果使用 Javascript 则直接修改
18. 执行影响较大的修改前，自动检测组件依赖关系，分析影响范围  

19. 代码生成后，自动优化（移除未使用 imports、合并重复样式）  
20. 对可能影响性能的代码（如不必要的重渲染、大型循环）提供优化建议  
21. 确保异常处理和加载状态管理，防止白屏和渲染错误  

22. 优先分析现有组件库与状态管理模式，避免创建冗余组件  
23. 添加功能时，优先考虑复用 hooks、contexts 或现有组件  
24. 如遇架构不清晰，先梳理组件层次与数据流，再执行修改  


